const PRICING = {
  single: { label: 'Single $20', amount: 20, credits: 1 },
  '10': { label: '10-Pack $180', amount: 180, credits: 10 },
  '20': { label: '20-Pack $360', amount: 360, credits: 20 },
};
const TIMETABLE = [
  { day: 'Monday', times: ['6:00 AM', '9:30 AM', '5:00 PM', '6:30 PM'] },
  { day: 'Tuesday', times: ['6:00 AM', '9:30 AM', '5:00 PM', '6:30 PM'] },
  { day: 'Wednesday', times: ['6:00 AM', '9:30 AM', '5:00 PM', '6:30 PM'] },
  { day: 'Thursday', times: ['6:00 AM', '9:30 AM', '5:00 PM', '6:30 PM'] },
  { day: 'Friday', times: ['6:00 AM', '9:30 AM'] },
  { day: 'Saturday', times: ['8:00 AM', '9:30 AM'] },
];
const DB_NAME = 'robbies_gym_db_v1'; let db = null;
function openDB(){return new Promise((res,rej)=>{const r=indexedDB.open(DB_NAME,1);r.onupgradeneeded=e=>{const d=e.target.result;d.createObjectStore('members',{keyPath:'id',autoIncrement:true});d.createObjectStore('attendance',{keyPath:'id',autoIncrement:true});d.createObjectStore('payments',{keyPath:'id',autoIncrement:true});};r.onsuccess=()=>{db=r.result;res();};r.onerror=()=>rej(r.error);});}
function tx(store,mode='readonly'){return db.transaction(store,mode).objectStore(store);}
function idbAdd(s,v){return new Promise((res,rej)=>{const r=tx(s,'readwrite').add(v);r.onsuccess=()=>res(r.result);r.onerror=()=>rej(r.error);});}
function idbPut(s,v){return new Promise((res,rej)=>{const r=tx(s,'readwrite').put(v);r.onsuccess=()=>res(r.result);r.onerror=()=>rej(r.error);});}
function idbGetAll(s){return new Promise((res,rej)=>{const r=tx(s).getAll();r.onsuccess=()=>res(r.result);r.onerror=()=>rej(r.error);});}
function idbGet(s,k){return new Promise((res,rej)=>{const r=tx(s).get(k);r.onsuccess=()=>res(r.result);r.onerror=()=>rej(r.error);});}
const $=(q)=>document.querySelector(q); const $$=(q)=>document.querySelectorAll(q);
const toast=$('#toast'); function showToast(m){toast.textContent=m;toast.style.display='block';setTimeout(()=>toast.style.display='none',1200);}
$$('nav button[data-tab]').forEach(b=>b.addEventListener('click',()=>{ $$('nav button').forEach(x=>x.classList.remove('active')); b.classList.add('active'); ['checkin','members','payments','reports'].forEach(t=>$('#tab-'+t).style.display='none'); $('#tab-'+b.dataset.tab).style.display='block'; if(b.dataset.tab==='members') refreshMembers(); if(b.dataset.tab==='payments') refreshPayments(); if(b.dataset.tab==='reports') refreshReports(); }));
const sessionGrid=$('#sessionGrid'); let selectedSession=null;
function renderSessions(){sessionGrid.innerHTML=''; TIMETABLE.forEach(d=>{ d.times.forEach(t=>{ const div=document.createElement('div'); div.className='session'; div.innerHTML=`<div class="time">${t}</div><div class="tag">${d.day}</div>`; div.onclick=()=>{selectedSession=`${d.day} ${t}`; $('#selectedSession').value=selectedSession;}; sessionGrid.appendChild(div); }); });}
async function refreshMemberDatalist(){const list=$('#memberList'); list.innerHTML=''; const ms=await idbGetAll('members'); ms.sort((a,b)=>a.name.localeCompare(b.name)).forEach(m=>{const o=document.createElement('option'); o.value=`${m.name} (${m.phone||''})`; o.dataset.id=m.id; list.appendChild(o);});}
async function findMemberByInput(v){const ms=await idbGetAll('members'); const t=v.trim().toLowerCase(); return ms.find(m=>(m.name+' '+(m.phone||'')).toLowerCase().includes(t));}
$('#addMember').addEventListener('click',async()=>{const name=$('#mName').value.trim(); if(!name) return alert('Name required'); const phone=$('#mPhone').value.trim(); const notes=$('#mNotes').value.trim(); await openIfNeeded(); const m={name,phone,notes,credits:1,createdAt:new Date().toISOString()}; await idbAdd('members',m); $('#mName').value=''; $('#mPhone').value=''; $('#mNotes').value=''; showToast('Member added (+1 free)'); refreshMembers(); refreshMemberDatalist();});
async function refreshMembers(){await openIfNeeded(); const tb=$('#memberTable tbody'); tb.innerHTML=''; const ms=await idbGetAll('members'); ms.sort((a,b)=>a.name.localeCompare(b.name)).forEach(m=>{const tr=document.createElement('tr'); tr.innerHTML=`<td>${m.name}</td><td>${m.phone||''}</td><td><span class='chip'>${m.credits||0}</span></td><td><button class='btn sm secondary' data-id='${m.id}'>+1</button></td>`; tb.appendChild(tr);}); tb.querySelectorAll('button[data-id]').forEach(btn=>btn.onclick=async()=>{const id=Number(btn.dataset.id); const m=await idbGet('members',id); m.credits=(m.credits||0)+1; await idbPut('members',m); refreshMembers(); refreshMemberDatalist(); showToast('Credit added');});}
$('#addCredit').addEventListener('click',async()=>{const val=$('#payMember').value; const m=await findMemberByInput(val); if(!m) return alert('Select a valid member'); const pack=$('#payPack').value; const p=PRICING[pack]; m.credits=(m.credits||0)+p.credits; await idbPut('members',m); await idbAdd('payments',{date:new Date().toISOString(),type:pack,amount:p.amount,credits:p.credits,memberId:m.id,memberName:m.name}); showToast('Payment applied'); $('#payMember').value=''; refreshPayments(); refreshMembers(); refreshMemberDatalist();});
async function refreshPayments(){await openIfNeeded(); const tb=$('#txTable tbody'); tb.innerHTML=''; const txs=await idbGetAll('payments'); txs.sort((a,b)=>new Date(b.date)-new Date(a.date)).forEach(t=>{const tr=document.createElement('tr'); tr.innerHTML=`<td>${new Date(t.date).toLocaleString()}</td><td>${PRICING[t.type]?.label||t.type}</td><td>${t.memberName}</td><td>$${t.amount}</td><td>${t.credits}</td>`; tb.appendChild(tr);});}
$('#confirmCheckin').addEventListener('click',async()=>{if(!selectedSession) return alert('Please select a session'); const val=$('#checkinMember').value; const m=await findMemberByInput(val); if(!m) return alert('Select a valid member'); await openIfNeeded(); if((m.credits||0)<=0){ if(confirm(`${m.name} has 0 credits. Add a Single ($20) and check in?`)){ m.credits=(m.credits||0)+PRICING.single.credits; await idbPut('members',m); await idbAdd('payments',{date:new Date().toISOString(),type:'single',amount:PRICING.single.amount,credits:PRICING.single.credits,memberId:m.id,memberName:m.name}); } else { return; } } m.credits=(m.credits||0)-1; await idbPut('members',m); await idbAdd('attendance',{date:new Date().toISOString(),session:selectedSession,memberId:m.id,memberName:m.name}); $('#checkinMember').value=''; showToast('Checked in'); refreshMembers(); refreshReports(); refreshPayments();});
async function refreshReports(){await openIfNeeded(); const tb=$('#attTable tbody'); tb.innerHTML=''; const atts=await idbGetAll('attendance'); atts.sort((a,b)=>new Date(b.date)-new Date(a.date)).slice(0,50).forEach(a=>{const tr=document.createElement('tr'); tr.innerHTML=`<td>${new Date(a.date).toLocaleString()}</td><td>${a.session}</td><td>${a.memberName}</td>`; tb.appendChild(tr);}); const today=new Date().toDateString(); const todays=atts.filter(a=>new Date(a.date).toDateString()===today); $('#todaySummary').textContent=todays.length?`${todays.length} check-ins today.`:'No check-ins today.';}
function toCSV(rows){return rows.map(r=>r.map(x=>'"'+String(x).replaceAll('"','""')+'"').join(',')).join('\n');}
function download(name,text){const blob=new Blob([text],{type:'text/csv'}); const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download=name; a.click(); URL.revokeObjectURL(a.href);}
$('#exportAttendance').addEventListener('click',async()=>{const atts=await idbGetAll('attendance'); const rows=[['date','session','memberId','memberName']]; atts.sort((a,b)=>new Date(a.date)-new Date(b.date)).forEach(a=>rows.push([a.date,a.session,a.memberId,a.memberName])); download('attendance.csv',toCSV(rows));});
$('#exportPayments').addEventListener('click',async()=>{const txs=await idbGetAll('payments'); const rows=[['date','type','memberId','memberName','amount','credits']]; txs.sort((a,b)=>new Date(a.date)-new Date(b.date)).forEach(t=>rows.push([t.date,t.type,t.memberId,t.memberName,t.amount,t.credits])); download('payments.csv',toCSV(rows));});
async function openIfNeeded(){if(!db) await openDB();}
async function init(){await openIfNeeded(); renderSessions(); refreshMembers(); refreshMemberDatalist(); refreshPayments(); refreshReports();}
init();
let deferredPrompt=null; const installBtn=document.getElementById('installBtn'); window.addEventListener('beforeinstallprompt',(e)=>{e.preventDefault(); deferredPrompt=e; installBtn.textContent='Install';}); installBtn.addEventListener('click',async()=>{if(deferredPrompt){deferredPrompt.prompt(); await deferredPrompt.userChoice; deferredPrompt=null;}});
